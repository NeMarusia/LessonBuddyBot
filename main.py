import sqlite3
import threading
from datetime import datetime
import telebot

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with open('Token.txt', 'r') as file:
    API_TOKEN = file.read().strip()
bot = telebot.TeleBot(API_TOKEN)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º polling
bot.remove_webhook()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'db.sqlite3'


def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS swaps (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        "group" TEXT,
        lesson_date TEXT,
        reason TEXT,
        body TEXT,
        user TEXT,
        status INTEGER,
        created_at TEXT,
        updated_at TEXT,
        details TEXT
    )''')
    conn.commit()
    conn.close()


init_db()


# –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞!', '–ó–∞–º–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞!', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–º–µ–Ω')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∑–∞–º–µ–Ω–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}


@bot.message_handler(func=lambda msg: msg.text == '–ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞!')
def need_swap_step_1(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):')
    user_states[message.chat.id] = {'step': 'awaiting_date'}


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'awaiting_date')
def need_swap_step_2(message):
    try:
        date = datetime.strptime(message.text, '%d.%m.%Y')
        user_states[message.chat.id]['lesson_date'] = date
        user_states[message.chat.id]['step'] = 'awaiting_reason'
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–º–µ–Ω—ã:')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'awaiting_reason')
def need_swap_step_3(message):
    user_states[message.chat.id]['reason'] = message.text
    user_states[message.chat.id]['step'] = 'awaiting_group'
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞:')


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'awaiting_group')
def need_swap_finalize(message):
    data = user_states.pop(message.chat.id)
    group = message.text
    date = data['lesson_date'].strftime('%Y-%m-%d')
    reason = data['reason']
    user = message.from_user.username or str(message.from_user.id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO swaps ("group", lesson_date, reason, user, status, created_at, updated_at)
                      VALUES (?, ?, ?, ?, ?, ?, ?)''',
                   (group, date, reason, user, 0, datetime.now(), datetime.now()))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É.')
    notify_curator(group, date, reason, user)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def notify_curator(group, date, reason, user):
    curator_id = '143612737'
    message_text = (
        f'üîî –ù–æ–≤–∞—è –∑–∞–º–µ–Ω–∞!\n'
        f'üìÖ –î–∞—Ç–∞: {date}\n'
        f'üë• –ì—Ä—É–ø–ø–∞: {group}\n'
        f'üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
        f'üë§ –û—Ç: @{user}'
    )
    bot.send_message(curator_id, message_text)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞!', '–ó–∞–º–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞!', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–º–µ–Ω')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫—É—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ–Ω"
    if message.from_user.id == CURATOR_ID:
        markup.add('–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ–Ω')

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∑–∞–º–µ–Ω–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ–Ω"
@bot.message_handler(func=lambda msg: msg.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ–Ω' and msg.from_user.id == CURATOR_ID)
def view_all_swaps_handler(message):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "swaps"
    cursor.execute(
        'SELECT "id", "group", "lesson_date", "reason", "user", "status" FROM swaps ORDER BY created_at DESC')
    rows = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if rows:
        response = "üìã –í—Å–µ –∑–∞–º–µ–Ω—ã:\n"
        for row in rows:
            swap_id, group, lesson_date, reason, user, status = row
            status_text = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ' if status == 0 else '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
            response += (
                f"‚ûñ –ó–∞–º–µ–Ω–∞ #{swap_id}\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group}\n"
                f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
                f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            )
    else:
        response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω –ø—É—Å—Ç."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É
    bot.send_message(message.chat.id, response)


# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@bot.message_handler(func=lambda msg: msg.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ–Ω' and msg.from_user.id != CURATOR_ID)
def view_all_swaps_access_denied(message):
    bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    threading.Thread(target=bot.infinity_polling, kwargs={"none_stop": True}).start()
