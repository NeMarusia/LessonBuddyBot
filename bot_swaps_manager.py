```python
import sqlite3
import threading
from datetime import datetime
import telebot

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with open('Token.txt', 'r') as file:
    API_TOKEN = file.read().strip()
bot = telebot.TeleBot(API_TOKEN)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º polling
bot.remove_webhook()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'db.sqlite3'


def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS swaps (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        "group" TEXT,
        lesson_date TEXT,
        reason TEXT,
        body TEXT,
        user TEXT,
        status INTEGER,
        created_at TEXT,
        updated_at TEXT,
        details TEXT
    )''')
    conn.commit()
    conn.close()


init_db()

# –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞!', '–ó–∞–º–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞!', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–º–µ–Ω')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∑–∞–º–µ–Ω–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}


@bot.message_handler(func=lambda msg: msg.text == '–ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞!')
def need_swap_step_1(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):')
    user_states[message.chat.id] = {'step': 'awaiting_date'}


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'awaiting_date')
def need_swap_step_2(message):
    try:
        date = datetime.strptime(message.text, '%d.%m.%Y')
        user_states[message.chat.id]['lesson_date'] = date
        user_states[message.chat.id]['step'] = 'awaiting_reason'
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–º–µ–Ω—ã:')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.')


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'awaiting_reason')
def need_swap_step_3(message):
    user_states[message.chat.id]['reason'] = message.text
    user_states[message.chat.id]['step'] = 'awaiting_group'
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞:')


@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'awaiting_group')
def need_swap_finalize(message):
    data = user_states.pop(message.chat.id)
    group = message.text
    date = data['lesson_date'].strftime('%Y-%m-%d')
    reason = data['reason']
    user = message.from_user.username or str(message.from_user.id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO swaps ("group", lesson_date, reason, user, status, created_at, updated_at)
                      VALUES (?, ?, ?, ?, ?, ?, ?)''',
                   (group, date, reason, user, 0, datetime.now(), datetime.now()))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É.')
    notify_curator(group, date, reason, user)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def notify_curator(group, date, reason, user):
    curator_id = 'https://t.me/SidorenkoMN'
    message_text = (
        f'üîî –ù–æ–≤–∞—è –∑–∞–º–µ–Ω–∞!\n'
        f'üìÖ –î–∞—Ç–∞: {date}\n'
        f'üë• –ì—Ä—É–ø–ø–∞: {group}\n'
        f'üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n'
        f'üë§ –û—Ç: @{user}'
    )
    bot.send_message(curator_id, message_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    threading.Thread(target=bot.infinity_polling, kwargs={"none_stop": True}).start()

```

### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. **–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ `bot` –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:**
   –¢–µ–ø–µ—Ä—å –æ–±—ä–µ–∫—Ç `bot` —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞.
   
2. **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –∫–æ–¥–∞:**
   –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã `CELERY`, `SSL`).

3. **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:**
   –ü–æ–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–∫–∏ –∫–æ–¥–∞, –≥–¥–µ –º–æ–≥–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã.

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫ `NameError`.